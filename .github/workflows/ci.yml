name: CI/CD

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev"]
  workflow_dispatch:
jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      # Checkout do código
      - name: Checkout código
        uses: actions/checkout@v4

      # Instalar Docker Compose
      - name: Instalar Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      # Subir ambiente backend + db com Docker Compose (versão CI)
      - name: Subir ambiente de teste (DB + Backend)
        run: docker-compose -f docker-compose.ci.yaml up -d db backend

      #  Aguardar backend iniciar
      - name: Esperar backend responder
        run: |
          echo "Aguardando backend iniciar..."
          for i in {1..30}; do
            if curl -s http://localhost:3000/actuator/health | grep '"status":"UP"' > /dev/null; then
              echo "Backend está online!"
              break
            fi
            echo "Tentativa $i/30..."
            sleep 5
          done
          echo "Backend não respondeu após 30 tentativas."
          exit 1


      #  Mostrar logs do backend (debug)    
      - name: Mostrar logs do backend (debug)
        if: always()
        run: docker logs $(docker ps -qf "name=agenda_backend")    

      # Configurar e buildar o frontend
      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Instalar dependências e buildar frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      #  Executar testes Cypress
      - name: Rodar testes Cypress (com backend ativo)
        uses: cypress-io/github-action@v6
        with:
          working-directory: ./frontend
          browser: chrome
          start: npx http-server dist -p 5173
          wait-on: "http://localhost:5173"
          wait-on-timeout: 60

      #  Salvar artefatos dos testes
      - name: Salvar artefatos do Cypress
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-results
          path: |
            frontend/cypress/videos
            frontend/cypress/screenshots
          retention-days: 7

      # Derrubar containers ao final
      - name: Derrubar containers
        if: always()
        run: docker-compose -f docker-compose.ci.yaml down

  #  Build e push das imagens para o GitHub Container Registry
  build-and-push:
    runs-on: ubuntu-latest
    needs: test-and-build
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Login no GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # FRONTEND
      - name: Build e Push do FRONTEND
        run: |
          docker build -t ghcr.io/${GITHUB_REPOSITORY,,}/frontend:${GITHUB_SHA} ./frontend
          docker push ghcr.io/${GITHUB_REPOSITORY,,}/frontend:${GITHUB_SHA}
          docker tag ghcr.io/${GITHUB_REPOSITORY,,}/frontend:${GITHUB_SHA} ghcr.io/${GITHUB_REPOSITORY,,}/frontend:latest
          docker push ghcr.io/${GITHUB_REPOSITORY,,}/frontend:latest

      # BACKEND
      - name: Build e Push do BACKEND
        run: |
          docker build -t ghcr.io/${GITHUB_REPOSITORY,,}/backend:${GITHUB_SHA} ./backend
          docker push ghcr.io/${GITHUB_REPOSITORY,,}/backend:${GITHUB_SHA}
          docker tag ghcr.io/${GITHUB_REPOSITORY,,}/backend:${GITHUB_SHA} ghcr.io/${GITHUB_REPOSITORY,,}/backend:latest
          docker push ghcr.io/${GITHUB_REPOSITORY,,}/backend:latest
