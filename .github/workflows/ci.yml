name: CI/CD

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev"]
  workflow_dispatch: # permite rodar manualmente no GitHub Actions


#Executa testes E2E (Cypress) no Frontend
jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      # Prepara ambiente
      - name: Checkout código
        uses: actions/checkout@v4

      # Instala Node.js (mesma versão usada no Dockerfile do front)
      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Instala dependências do frontend de forma limpa (npm ci)
      - name: Instalar dependências
        working-directory: ./frontend
        run: npm ci

      # Build do Frontend
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      # Inicia o servidor local para servir o build e testar com Cypress
      - name: Iniciar servidor local
        working-directory: ./frontend
        run: |
          npx http-server dist -p 5173 &
          sleep 5

      # Executar testes Cypress
      - name: Rodar testes Cypress
        uses: cypress-io/github-action@v6
        with:
          working-directory: ./frontend
          browser: chrome
          start: npx http-server dist -p 5173
          wait-on: "http://localhost:5173"
          wait-on-timeout: 60
          command: npx cypress run --browser chrome

      # Salvar artefatos
      # Salva os vídeos e screenshots do Cypress para análise posterior
      - name: Salvar artefatos do Cypress
        if: always()  # executa mesmo se o teste falhar
        uses: actions/upload-artifact@v4
        with:
          name: cypress-results
          path: |
            frontend/cypress/videos
            frontend/cypress/screenshots
          retention-days: 7

      # Salva o build do frontend (dist/)
      - name: Salvar build do frontend
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
          retention-days: 3

# Build e push das imagens Docker para o GHCR
  build-and-push:
    runs-on: ubuntu-latest
    needs: test-and-build  # só executa se os testes passarem
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      # Login no GitHub Container Registry (GHCR)
      - name: Login no GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build e Push do FRONTEND
      - name: Build imagem FRONTEND
        run: |
          docker build -t ghcr.io/${GITHUB_REPOSITORY,,}/frontend:${GITHUB_SHA} ./frontend
          docker tag ghcr.io/${GITHUB_REPOSITORY,,}/frontend:${GITHUB_SHA} ghcr.io/${GITHUB_REPOSITORY,,}/frontend:latest

      - name: Push imagem FRONTEND
        run: |
          docker push ghcr.io/${GITHUB_REPOSITORY,,}/frontend:${GITHUB_SHA}
          docker push ghcr.io/${GITHUB_REPOSITORY,,}/frontend:latest

      # Build e Push do BACKEND
      - name: Build imagem BACKEND (Spring Boot)
        run: |
          docker build -t ghcr.io/${GITHUB_REPOSITORY,,}/backend:${GITHUB_SHA} ./backend
          docker tag ghcr.io/${GITHUB_REPOSITORY,,}/backend:${GITHUB_SHA} ghcr.io/${GITHUB_REPOSITORY,,}/backend:latest

      - name: Push imagem BACKEND
        run: |
          docker push ghcr.io/${GITHUB_REPOSITORY,,}/backend:${GITHUB_SHA}
          docker push ghcr.io/${GITHUB_REPOSITORY,,}/backend:latest
